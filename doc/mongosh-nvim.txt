*mongosh.nvim*    A frontend for `mongosh` in NeoVim.

===============================================================================
Table of Contents

1. Prerequest                                          |mongosh-nvim-prerequest|
2. Overview                                             |mongosh-nvim-overview|
3. Commands                                              |mongosh-nvim-command|
4. Configuration                                   |mongosh-nvim-configuration|

===============================================================================
1. Prerequest                                          *mongosh-nvim-prerequest*

Your should have `mongosh` installed on your machine.

===============================================================================
2. Overview                                             *mongosh-nvim-overview*

This plugin talk to mongosh with buffer content, and write operation result as
buffer content. When a new buffer should be created, and how that buffer
should be shown on screen is configurable.

On each executation, a new mongosh process is spawn for evaluation. No long
term connection is kept.

This plugin manage its operations by attaching meta info to buffers.

For example, by recognizing operation type of a buffer, one command can behave
differently on different buffer, see |mongosh-nvim.cmd.edit|.

If a buffer is created by this plugin, such meta info will be attached as the
buffer is created. For an existing buffer, once your run command with its
content, corresponding meta info will then be attached to that buffer.

By default, when meta info is attached to a buffer, following key map will be
set on that buffer:
    - `<A-b>`, 'build' the buffer, which means generates result buffer with
    its content.
    - `<A-r>`, refresh the buffer, regenerate its content with information
    binded to the buffer.

You can set your custom keymap when such meta info is created with user config
if you like to.

===============================================================================
3. Commands                                              *mongosh-nvim-command*

This plugin provides one user command `:Mongo` as entrance, each of its
subcommand provides one actual functionality.

`:Mongo connect`                                     *mongosh-nvim.cmd.connect*

    This command sets connection arguments for latter executation.

    This command is almost transparent to mongosh, which means most flags you
    provide to this command will be passed to mongosh as is. And all flags
    supported by mongosh can be passed to this command. (Note: though not all
    mongosh flags are listed in completion of this command, they are still
    supported and will finally be passed to mongosh calls.)

    There are several extra flags provided by this command:
        - `db-addr`, database address used for connection, value takes one of
        following forms:
            - database name: `foo`
            - host address and database name: `localhost/foo`
            - host address with port and database name: `localhost:27017/foo`
            - any valid connection URI string: `mongosh://localhost:27017/foo`

          Value of this flag will be used as first positional argument to mongosh
        calls. Everything mongosh supports for this argument also works here.

        - `with-auth`, a boolean flag, presence of this flag indicates `true`.
        When sets to `true`, plugin will ask user input for authentication
        information, including user name, password, authentication source
        database. If any of these three is not needed, just leave input box
        blank and press enter.

          You can also provides user name and password via `--username` and
        `--password` flag if you don't mind your password gets recorded in input
        history.

    Normally speaking, everyone who can reads memory of running program on
    your machine can do many other horrible things to your system, so this
    plugin assumes storing connection information in memory to be safe.

    With that being said, this plugin still remaps string connection info with a
    shuffeled ASCII list, texts gets recovered only when they are read, used.
    This makes connection information not directly readable when your memory
    gets dumped.

`:Mongo database`                                   *mongosh-nvim.cmd.database*

    List all available databases on current host and pick one as current target.

`:Mongo collection`                               *mongosh-nvim.cmd.collection*

    List all available collections in a buffer and pick one to create a new query
    buffer.
    Selection is made putting cursor on target collection name and press `Enter`
    key.

`:Mongo execute`                                     *mongosh-nvim.cmd.execute*

    Run content in current buffer with mongosh. Command support range argument.
    With visual selection, only selected part will be executed.

    Standard out put of executation will be display in another buffer.

    Please note that you need to print out all information of your interest in
    your script snippet yourself, or else there will only be default content
    in result buffer.

`:Mongo query`                                         *mongosh-nvim.cmd.query*

    Run query in current buffer. Command support range argument.
    With visual selection, only selected part will be executed.

    Query result will be written to buffer.

    Query snippet should be a single expression that resolve to a database
    cursor value, such as a call to `db.collection.find()` method. Query
    buffer created by this plugin will have example snippet as their initial
    content.

    Before gets run, query snippet will be embeded into a template. Cursor
    value returned by query expression will be written to result buffer as
    JSON.

`:Mongo edit`                                           *mongosh-nvim.cmd.edit*

    Run edit snippet in current buffer. Command support range argument.
    With visual selection, only selected part will be executed.

    Final behavior varies according to the type of current buffer.

    - With query result buffer, a new edit buffer with collection name of that
    query, and id of the nearest document to cursor will be created.
    - With edit buffer, create and run a replace snippet with current buffer
    content. Executation result will be written to another buffer.

    A replace snippet for edit buffer should define following variables:
        - `collection`, string value for collection name.
        - `id`, target document's `_id` value.
        - `replacement`, new document value to use as `replaceOne` argument

    Replace snippet will be merge into a template with `replaceOne` call into
    the collection of your choice.

    Executation result of a replace snippet will be written to result buffer
    as JSON text.

`:Mongo refresh`                                     *mongosh-nvim.cmd.refresh*

    Regenerates content of current buffer according to its type.

    For example, running this command in a query result buffer will run its
    query again, and query result will again be written to that buffer.

`:Mongo new query`                                 *mongosh-nvim.cmd.new.query*

    List all available collections in current database. Create a new query
    buffer with user selection.

`:Mongo new edit`                                   *mongosh-nvim.cmd.new.edit*

    Create a new edit buffer with given collection name, document id.

    Available flags:
        - `collection`, `c`, target collection name.
        - `id`, document's `_id` field value.

===============================================================================
4. Configuration                                   *mongosh-nvim-configuration*

All available config options and default config value are list at
https://github.com/SirZenith/mongosh.nvim/blob/main/lua/mongosh-nvim/config.lua

User config table can be passed to plugin as follow:

>lua
    require "mongosh-nvim".setup {
        -- your config here
        executable = "/usr/local/bin/mongosh"
        connection = {
            default_db_addr = "192.168.1.10:10001"
        }
    }
<

User config will be merge into default config. Options that not provided by
user will use default value.

vim:tw=78:ts=4:sw=4:et:ft=help:norl:
